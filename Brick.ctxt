#BlueJ class context
comment0.target=Brick
comment0.text=\r\n\ The\ Brick\ class\ models\ instances\ of\ the\ bricks\ which\ can\ be\ destroyed\ by\ the\ ball\ in\ the\ breakout\ game\r\n\ \r\n\ No\ changes\ need\ to\ be\ made\ by\ the\ student\ for\ this\ class\r\n\ \r\n\ @author\ Joseph\ Kendall-Morwick\ <jkendallmorwick@missouriwestern.edu>\r\n\ @version\ 9/10/2017\r\n
comment1.params=newGame\ newRow\ newColumn
comment1.target=Brick(Game,\ int,\ int)
comment1.text=constructs\ a\ new\ Brick\ object\ within\ the\ specified\ game\ at\ the\ specified\ location.
comment10.params=ball\ nextX\ nextY
comment10.target=boolean\ isCollidingWithBallTop(Ball,\ double,\ double)
comment10.text=\ returns\ true\ if\ the\ ball\ will\ collide\ with\ the\ top\ side\ of\ this\ Brick.\r\n\ nextX\ and\ nextY\ are\ the\ coordinates\ of\ the\ location\ the\ Ball\ is\ moving\ to.\ \ \r\n
comment11.params=
comment11.target=double\ getYLocation()
comment11.text=\ calculates\ the\ vertical\ position\ of\ this\ brick\r\n\ This\ location\ is\ calculated\ relative\ to\ the\ Brick's\ position\ on\ the\ BrickBoard,\ the\ \r\n\ size\ of\ a\ Brick,\ and\ the\ location\ of\ the\ BrickBoard\r\n
comment12.params=ball\ nextX\ nextY
comment12.target=boolean\ isCollidingWithBallBottom(Ball,\ double,\ double)
comment12.text=\ returns\ true\ if\ the\ ball\ will\ collide\ with\ the\ bottom\ side\ of\ this\ Brick.\r\n\ nextX\ and\ nextY\ are\ the\ coordinates\ of\ the\ location\ the\ Ball\ is\ moving\ to.\ \ \r\n
comment13.params=ball\ nextX\ nextY
comment13.target=boolean\ isCollidingWithBall(Ball,\ double,\ double)
comment14.params=color
comment14.target=void\ setColor(java.lang.String)
comment14.text=\ sets\ the\ color\ of\ the\ Brick.\r\n\ Possibilities\ are\ magenta,\ cyan,\ blue,\ red,\ green,\ or\ yellow\r\n
comment15.params=
comment15.target=void\ draw()
comment15.text=draws\ this\ Brick\ to\ the\ off-screen\ buffer
comment2.params=
comment2.target=boolean\ isVisible()
comment2.text=returns\ whether\ or\ not\ this\ Brick\ is\ visible
comment3.params=
comment3.target=int\ getRow()
comment3.text=\ the\ row\ within\ the\ BrickBoard\ this\ Brick\ resides\ at.\r\n\ the\ first\ row\ is\ row\ \#0.\ \ \r\n
comment4.params=
comment4.target=int\ getColumn()
comment4.text=\ the\ column\ within\ the\ BrickBoard\ this\ Brick\ resides\ at.\r\n\ the\ first\ column\ is\ column\ \#0.\ \ \r\n
comment5.params=
comment5.target=void\ reset()
comment5.text=returns\ this\ Brick\ to\ visible\ status
comment6.params=
comment6.target=double\ getXLocation()
comment6.text=\ calculates\ the\ horizontal\ position\ of\ this\ brick\r\n\ This\ location\ is\ calculated\ relative\ to\ the\ Brick's\ position\ on\ the\ BrickBoard,\ the\ \r\n\ size\ of\ a\ Brick,\ and\ the\ location\ of\ the\ BrickBoard\r\n
comment7.params=
comment7.target=void\ turnOff()
comment7.text=\ destroys\ this\ brick\ (makes\ it\ invisible\ and\ no\ longer\ able\ to\ collide\ with\ the\ ball\ '\r\n\ Additionally,\ the\ user's\ score\ is\ updated\ by\ 10\ points.\ \r\n
comment8.params=ball\ nextX\ nextY
comment8.target=boolean\ isCollidingWithBallLeft(Ball,\ double,\ double)
comment8.text=\ returns\ true\ if\ the\ ball\ will\ collide\ with\ the\ left\ side\ of\ this\ Brick.\r\n\ nextX\ and\ nextY\ are\ the\ coordinates\ of\ the\ location\ the\ Ball\ is\ moving\ to.\ \ \r\n
comment9.params=ball\ nextX\ nextY
comment9.target=boolean\ isCollidingWithBallRight(Ball,\ double,\ double)
comment9.text=\ returns\ true\ if\ the\ ball\ will\ collide\ with\ the\ right\ side\ of\ this\ Brick.\r\n\ nextX\ and\ nextY\ are\ the\ coordinates\ of\ the\ location\ the\ Ball\ is\ moving\ to.\ \ \r\n
numComments=16
